# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
    
  build:
    
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        architecture: [x86, x86_64, aarch32, aarch64]
        exclude:
          - os: macos-latest
            architecture: x86
          - os: macos-latest
            architecture: aarch32
          - os: macos-latest
            architecture: aarch64

    steps:
    - name: Get latest CMake
      # Using 'latest' branch, the latest CMake is installed.
      uses: lukka/get-cmake@latest
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Set up x86 JDK 1.8
      if: matrix.architecture == 'x86'
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        architecture: x86
    - name: Set up x64 JDK 1.8
      if: matrix.architecture != 'x86' 
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        architecture: x64
    - name: Build with Gradle
      env:
         ARCHITECTURE: ${{ matrix.architecture }}
         OS: ${{ matrix.os }}
      shell: bash
      run: |
        armJdkPath=""
        if [ $OS = "ubuntu-latest" ]; then
          sudo apt update
          if [ $ARCHITECTURE = "aarch32" ]; then
            sudo apt install qemu-user qemu-user-static gcc-arm-linux-gnueabihf binutils-arm-linux-gnueabihf binutils-arm-linux-gnueabihf-dbg g++-arm-linux-gnueabihf
            wget https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u292-b10/OpenJDK8U-jdk_arm_linux_hotspot_8u292b10.tar.gz
            tar -xvzf OpenJDK8U-jdk_arm_linux_hotspot_8u292b10.tar.gz && mv jdk8u292-b10-aarch32-20210423 aarch32JDK
            armJdkPath="./aarch32JDK"
          elif [ $ARCHITECTURE = "aarch64" ]; then
            sudo apt install qemu-user qemu-user-static gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu binutils-aarch64-linux-gnu-dbg build-essential g++-aarch64-linux-gnu
            wget https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u292-b10/OpenJDK8U-jdk_aarch64_linux_hotspot_8u292b10.tar.gz
            tar -xvzf OpenJDK8U-jdk_aarch64_linux_hotspot_8u292b10.tar.gz && mv jdk8u292-b10 aarch64JDK
            armJdkPath="./aarch64JDK"
          elif [ $ARCHITECTURE == "x86" ]; then
            sudo apt-get install gcc-multilib g++-multilib
          fi
        fi
        if [ $OS = "windows-latest" ] && ([ $ARCHITECTURE = "aarch32" ] || [ $ARCHITECTURE = "aarch64" ]); then
          ./gradlew build -P${ARCHITECTURE}Build -ParmJdkPath=${armJdkPath} -Pj=2 -x test
        else
          ./gradlew build -P${ARCHITECTURE}Build -ParmJdkPath=${armJdkPath} -Pj=2
        fi
    - name: Upload artifact
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      uses: actions/upload-artifact@v2
      with:
        name: Package-${{ matrix.os }}-${{ matrix.architecture }}
        path: build/natives/lib/Release
    - name: Upload Windows artifact
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v2
      with:
        name: Package-${{ matrix.os }}-${{ matrix.architecture }}
        path: build/natives/bin/Release
  
  combine:
    name: Download platform-specific binaries and combine into single JAR
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Create directory
        shell: bash
        run: |
          mkdir -p ./build/natives/downloads
      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          path: ./build/natives/downloads/
      - name: Extract binaries from subdirectories
        shell: bash
        run: |
          dirArray=(./build/natives/downloads/*/);
          for dir in "${dirArray[@]}"; do
            cp -a ${dir}. ./build/natives/downloads/;
            rm -r ${dir};
          done
      - name: Repackage JAR with all binaries
        shell: bash
        run: ./gradlew build -x compileJNI -x test
      - name: Create pom file for maven
        run: ./gradlew createPom
      - name: Upload pom file
        uses: actions/upload-artifact@v2
        with:
          name: PomFile
          path: ./build/pom/
      - name: Upload final JAR
        uses: actions/upload-artifact@v2
        with:
          name: FinalJAR
          path: build/libs
