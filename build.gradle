import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'maven'
}
apply plugin: 'com.jfrog.bintray'

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenLocal()
    mavenCentral()
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
}
version = '0.14.0'
test {
    useJUnitPlatform()
}

sourceSets {
    main {
        resources {
            if (OperatingSystem.current().isLinux() ||
                    OperatingSystem.current().isMacOsX() ||
                    OperatingSystem.current().isUnix()) {
                srcDirs "src/main/resources", "build/natives/lib/Release", "build/natives/downloads"
            } else if (OperatingSystem.current().isWindows()) {
                srcDirs "src/main/resources", "build/natives/bin/Release", "build/natives/downloads"
            }
        }
    }
}

compileJava {
    System.setProperty("user.dir", project.projectDir.toString())
    options.compilerArgs += ["-h", file("src/main/include")]
    options.encoding = "UTF-8"
}

task compileJNI {
    dependsOn compileJava
    outputs.upToDateWhen { false }
    doLast {
        exec {
            if (OperatingSystem.current().isLinux() ||
                    OperatingSystem.current().isMacOsX() ||
                    OperatingSystem.current().isUnix()) {
                commandLine 'sh', '-c', 'mkdir -p build/natives && cd build/natives && cmake ../.. && cmake --build . --config Release'
            } else if (OperatingSystem.current().isWindows()) {
                commandLine "cmd", "/c", 'if not exist "build\\natives" mkdir build\\natives && cd build\\natives && cmake ..\\.. && cmake --build . --config Release'
            }
        }
    }
}

clean.doFirst {
    delete fileTree('src/main/include') {
        include 'io_opentimeline_*.h'
    }
}

processResources {
    dependsOn compileJNI
}

tasks.withType(Test) {
    if (OperatingSystem.current().isLinux()) {
        systemProperty "java.library.path", "build/natives/lib/Release/Linux"
    } else if (OperatingSystem.current().isMacOsX()) {
        systemProperty "java.library.path", "build/natives/lib/Release/Darwin"
    } else if (OperatingSystem.current().isWindows()) {
        systemProperty "java.library.path", "build\\natives\\bin\\Release\\Windows"
    }
    testLogging.showStandardStreams = false
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc.failOnError = false
javadoc {
    options.overview = "overview.html" // relative to source root
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task createPom {
    pom {
        project {
            groupId 'io.opentimeline'
            artifactId 'opentimelineio'
            version version.toString()
            description 'OpenTimelineIO is an interchange format and API for editorial cut information. OTIO is not a container format for media, rather it contains information about the order and length of cuts and references to external media.'
            url 'opentimeline.io'
            name 'OpenTimelineIO'
            licenses {
                license {
                    name "Modified Apache 2.0 License"
                    url "https://github.com/PixarAnimationStudios/OpenTimelineIO/blob/master/LICENSE.txt"
                    distribution "repo"
                }
            }
            developers {
                developer {
                    id "OpenTimelineIO"
                    name "Contributors to the OpenTimelineIO project"
                    email "otio-discussion@lists.aswf.io"
                }
            }
            scm {
                url "https://github.com/PixarAnimationStudios/OpenTimelineIO"
            }
        }
    }.writeTo("build/pom/opentimelineio-" + version.toString() + ".pom")
}
