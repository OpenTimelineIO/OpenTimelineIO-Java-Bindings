import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'maven'
}
apply plugin: 'com.jfrog.bintray'

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenLocal()
    mavenCentral()
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
}
version = '0.14.0-beta-2'
test {
    useJUnitPlatform()
}

sourceSets {
    main {
        resources {
            if (OperatingSystem.current().isLinux() ||
                    OperatingSystem.current().isMacOsX() ||
                    OperatingSystem.current().isUnix()) {
                srcDirs "src/main/resources", "build/natives/lib/Release", "build/natives/downloads"
            } else if (OperatingSystem.current().isWindows()) {
                srcDirs "src/main/resources", "build/natives/bin/Release", "build/natives/downloads"
            }
        }
    }
}

compileJava {
    if (OperatingSystem.current().isLinux()) {
        def armJavacPath = ""
        def armJavaPath = ""
        def armJdkPath = ""
        if (project.hasProperty('armJdkPath')) {
            armJdkPath = project.getProperties()['armJdkPath'] as String
            armJavacPath = file(armJdkPath + '/bin/javac').absolutePath
            armJavaPath = file(armJdkPath + '/bin/java').absolutePath
        }
        def modifiedJavacFile = new File('armjavac.sh')
        def modifiedJavaFile = new File('armjava.sh')

        def qemuCommand = ""
        if (project.hasProperty("aarch64Build")) {
            qemuCommand = 'qemu-aarch64 -L /usr/aarch64-linux-gnu/ '
        } else if (project.hasProperty("aarch32Build")) {
            qemuCommand = 'qemu-arm -L /usr/arm-linux-gnueabihf/ '
        }

        if (project.hasProperty("aarch64Build") || project.hasProperty("aarch32Build")) {
            if (armJdkPath.isEmpty()) {
                throw new InvalidUserDataException("ARM JDK path not provided.\n" +
                        "Specify the ARM JDK path like this: -ParmJdkPath=<jdk-path>")
            }

            modifiedJavacFile.withWriter {
                writer -> writer.writeLine qemuCommand + armJavacPath + ' "$@"'
            }
            modifiedJavacFile.setExecutable(true)
            modifiedJavaFile.withWriter {
                writer -> writer.writeLine qemuCommand + armJavaPath + ' "$@"'
            }
            modifiedJavaFile.setExecutable(true)

            if (modifiedJavacFile.exists() && modifiedJavaFile.exists()) {
                options.forkOptions.executable = file(modifiedJavacFile.path).absolutePath
                test.executable = file(modifiedJavaFile.path).absolutePath
            }
        }
    }

    System.setProperty("user.dir", project.projectDir.toString())
    options.compilerArgs += ["-h", file("src/main/include")]
    options.encoding = "UTF-8"
}

task compileJNI {
    dependsOn compileJava
    outputs.upToDateWhen { false }
    doLast {
        exec {
            // determine CPU architecture name and windows generator name
            String architecture = "";
            String generator = "";
            if (System.getProperty("os.arch").equals("arm") || System.getProperty("os.arch").equals("aarch32")
                    || project.hasProperty("aarch32Build")) {
                architecture = "aarch32";
                generator = "ARM";
            } else if (System.getProperty("os.arch").equals("arm64") || System.getProperty("os.arch").equals("aarch64")
                    || project.hasProperty("aarch64Build")) {
                architecture = "aarch64";
                generator = "ARM64";
            } else if (System.getProperty("os.arch").endsWith("86")) {
                architecture = "x86";
                generator = "Win32";
            } else if (System.getProperty("os.arch").equals("amd64") || System.getProperty("os.arch").equals("x86_64")) {
                architecture = "amd64";
                generator = "x64";
            }

            if (OperatingSystem.current().isLinux() ||
                    OperatingSystem.current().isMacOsX() ||
                    OperatingSystem.current().isUnix()) {
                // ANDROID BUILD
                if (project.hasProperty("androidBuild") && project.hasProperty("sdk_path")) {
                    def sdk_path = project.getProperties().getAt('sdk_path').toString()
                    def architectures = ["arm64-v8a", "x86_64", "armeabi-v7a", "x86"] as String[]
                    def commands = []
                    for (arch in architectures) {
                        def commandStr = 'cmake -G"Ninja" -DANDROID_ABI=' + arch + ' -DANDROID_NDK=' + sdk_path + '/ndk/22.0.7026061 -DCMAKE_BUILD_TYPE=Release -DCMAKE_MAKE_PROGRAM=' + sdk_path + '/cmake/3.10.2.4988404/bin/ninja -DCMAKE_TOOLCHAIN_FILE=' + sdk_path + '/ndk/22.0.7026061/build/cmake/android.toolchain.cmake -DANDROID_NATIVE_API_LEVEL=23 -DANDROID_TOOLCHAIN=clang ../.. && ' +
                                'cmake --build . --config Release && ' +
                                'mv lib/Release/Android/ lib/Release/' + arch + ' && ' +
                                'rm CMakeCache.txt'
                        commands.add(commandStr)
                    }
                    def buildCommand = commands.join(' && ')
                    commandLine 'sh', '-c', 'mkdir -p build/natives && ' +
                            'cd build/natives && ' +
                            buildCommand
                } else if (OperatingSystem.current().isMacOsX()) {
                    commandLine 'sh', '-c', 'mkdir -p build/natives && cd build/natives && cmake ../.. && cmake --build . --config Release'
                } else if (OperatingSystem.current().isLinux()) { // LINUX BUILD
                    def nativeDir = new File('build/natives')
                    if (!nativeDir.exists()) {
                        nativeDir.mkdirs()
                    }
                    def cmakeToolchain = ""
                    if (architecture == "aarch64" || architecture == "aarch32" || architecture == "x86" ||
                            project.hasProperty("aarch64Build") || project.hasProperty("aarch32Build")) {
                        cmakeToolchain = "-DCMAKE_TOOLCHAIN_FILE=../../linux-" + architecture + "-toolchain.cmake &&"
                    } else if (System.getProperty("os.arch") == "x86_64" || System.getProperty("os.arch") == "amd64") {
                        cmakeToolchain = "&&"
                    }
                    commandLine 'sh', '-c', 'cd build/natives && cmake ../.. ' + cmakeToolchain + ' cmake --build . --config Release && ' +
                            'mv lib/Release/Linux lib/Release/Linux-' + architecture
                }
            } else if (OperatingSystem.current().isWindows()) { // WINDOWS BUILD
                def nativeDir = new File('build\\natives')
                if (!nativeDir.exists()) {
                    nativeDir.mkdirs()
                }
                commandLine "cmd", "/c", 'cd build\\natives && cmake -A ' + generator + ' ..\\.. && cmake --build . --config Release && ' +
                        'ren bin\\Release\\Windows Windows-' + architecture
            }
        }
    }
}

clean.doFirst {
    delete fileTree('src/main/include') {
        include 'io_opentimeline_*.h'
    }
}

processResources {
    dependsOn compileJNI
}

tasks.withType(Test) {
    if (OperatingSystem.current().isLinux()) {
        systemProperty "java.library.path", "build/natives/lib/Release/Linux"
    } else if (OperatingSystem.current().isMacOsX()) {
        systemProperty "java.library.path", "build/natives/lib/Release/Darwin"
    } else if (OperatingSystem.current().isWindows()) {
        systemProperty "java.library.path", "build\\natives\\bin\\Release\\Windows"
    }
    testLogging.showStandardStreams = false
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc.failOnError = false
javadoc {
    options.overview = "overview.html" // relative to source root
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task createPom {
    pom {
        project {
            groupId 'io.opentimeline'
            artifactId 'opentimelineio'
            version version.toString()
            description 'OpenTimelineIO is an interchange format and API for editorial cut information. OTIO is not a container format for media, rather it contains information about the order and length of cuts and references to external media.'
            url 'opentimeline.io'
            name 'OpenTimelineIO'
            licenses {
                license {
                    name "Modified Apache 2.0 License"
                    url "https://github.com/PixarAnimationStudios/OpenTimelineIO/blob/master/LICENSE.txt"
                    distribution "repo"
                }
            }
            developers {
                developer {
                    id "OpenTimelineIO"
                    name "Contributors to the OpenTimelineIO project"
                    email "otio-discussion@lists.aswf.io"
                }
            }
            scm {
                url "https://github.com/PixarAnimationStudios/OpenTimelineIO"
            }
        }
    }.writeTo("build/pom/opentimelineio-" + version.toString() + ".pom")
}
